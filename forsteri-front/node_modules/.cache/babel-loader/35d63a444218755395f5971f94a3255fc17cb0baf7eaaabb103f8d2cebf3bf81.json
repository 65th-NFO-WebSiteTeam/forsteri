{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kaito\\\\Desktop\\\\Coding\\\\NF\\\\forsteri\\\\forsteri-front\\\\src\\\\auth\\\\pages\\\\LoginForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { login } from '../api/auth';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginForm = _ref => {\n  _s();\n  let {\n    onLogin\n  } = _ref;\n  const initialState = {\n    username: '',\n    password: ''\n  };\n  const [formData, setFormData] = useState(initialState);\n  const [csrfToken, setCsrfToken] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    // CSRFトークンを取得する関数を定義\n    const getCsrfToken = async () => {\n      try {\n        const res = await fetch('http://localhost:8000/api/csrf_token/');\n        const data = await res.json();\n        setCsrfToken(data.csrfToken);\n      } catch (error) {\n        console.error('Failed to fetch CSRF token:', error);\n      }\n    };\n    getCsrfToken();\n  }, []);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleLogin = () => {\n    onLogin(); // ログイン状態を更新するためのコールバック関数を呼び出す\n    navigate('/'); // トップにリダイレクト\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    login(formData, csrfToken).then(data => {\n      console.log('Login successful:', data);\n      const token = data.token;\n      localStorage.setItem('token', token); // トークンをローカルストレージに保存\n      handleLogin(); // ログイン成功時の処理を実行\n    }).catch(error => {\n      console.error('Failed to login:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Login Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Username:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"username\",\n          value: formData.username,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: formData.password,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"hidden\",\n        name: \"csrfmiddlewaretoken\",\n        value: csrfToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"eDcfc55eRgB4mM0I8RV7sitcSDY=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","useEffect","login","useNavigate","jsxDEV","_jsxDEV","LoginForm","_ref","_s","onLogin","initialState","username","password","formData","setFormData","csrfToken","setCsrfToken","navigate","getCsrfToken","res","fetch","data","json","error","console","handleChange","e","target","name","value","handleLogin","handleSubmit","preventDefault","then","log","token","localStorage","setItem","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","_c","$RefreshReg$"],"sources":["C:/Users/kaito/Desktop/Coding/NF/forsteri/forsteri-front/src/auth/pages/LoginForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { login } from '../api/auth';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const LoginForm = ({ onLogin }) => {\r\n  const initialState = {\r\n    username: '',\r\n    password: '',\r\n  };\r\n\r\n  const [formData, setFormData] = useState(initialState);\r\n  const [csrfToken, setCsrfToken] = useState('');\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // CSRFトークンを取得する関数を定義\r\n    const getCsrfToken = async () => {\r\n      try {\r\n        const res = await fetch('http://localhost:8000/api/csrf_token/');\r\n        const data = await res.json();\r\n        setCsrfToken(data.csrfToken);\r\n      } catch (error) {\r\n        console.error('Failed to fetch CSRF token:', error);\r\n      }\r\n    };\r\n\r\n    getCsrfToken();\r\n  }, []);\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    onLogin(); // ログイン状態を更新するためのコールバック関数を呼び出す\r\n    navigate('/'); // トップにリダイレクト\r\n  };\r\n  \r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    login(formData, csrfToken)\r\n      .then((data) => {\r\n        console.log('Login successful:', data);\r\n        const token = data.token;\r\n        localStorage.setItem('token', token); // トークンをローカルストレージに保存\r\n        handleLogin(); // ログイン成功時の処理を実行\r\n      })\r\n      .catch((error) => {\r\n        console.error('Failed to login:', error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login Form</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Username:\r\n          <input type=\"text\" name=\"username\" value={formData.username} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <label>\r\n          Password:\r\n          <input type=\"password\" name=\"password\" value={formData.password} onChange={handleChange} />\r\n        </label>\r\n        <br />\r\n        <input type=\"hidden\" name=\"csrfmiddlewaretoken\" value={csrfToken} /> {/* CSRFトークンを設定 */}\r\n        <button type=\"submit\">Login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}